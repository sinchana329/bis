import numpy as np


def rastrigin(x):
    n = len(x)
    return 10 * n + sum(x_i**2 - 10 * np.cos(2 * np.pi * x_i) for x_i in x)


num_particles = 30
num_iterations = 100
w = 0.7        
c1 = 1.4        
c2 = 1.4       
dim = 2          


x_min = -5.12
x_max = 5.12
v_max = (x_max - x_min) * 0.1

positions = np.random.uniform(x_min, x_max, (num_particles, dim))
velocities = np.random.uniform(-v_max, v_max, (num_particles, dim))


pbest_positions = positions.copy()
pbest_scores = np.array([rastrigin(p) for p in positions])

gbest_index = np.argmin(pbest_scores)
gbest_position = pbest_positions[gbest_index].copy()
gbest_score = pbest_scores[gbest_index]


for iteration in range(num_iterations):
    for i in range(num_particles):
        r1 = np.random.rand(dim)
        r2 = np.random.rand(dim)

       
        cognitive_velocity = c1 * r1 * (pbest_positions[i] - positions[i])
        social_velocity = c2 * r2 * (gbest_position - positions[i])
        velocities[i] = w * velocities[i] + cognitive_velocity + social_velocity

      
        velocities[i] = np.clip(velocities[i], -v_max, v_max)

        positions[i] += velocities[i]
        positions[i] = np.clip(positions[i], x_min, x_max)

        fitness = rastrigin(positions[i])

        if fitness < pbest_scores[i]:
            pbest_positions[i] = positions[i].copy()
            pbest_scores[i] = fitness

           
            if fitness < gbest_score:
                gbest_position = positions[i].copy()
                gbest_score = fitness

    # Print progress
    print(f"Iteration {iteration+1}/{num_iterations}, Global Best Score: {gbest_score:.4f}")

# Step 7: Output best solution
print(f"\nBest solution found at position {gbest_position} with value {gbest_score:.4f}")
